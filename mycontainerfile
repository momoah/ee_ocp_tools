ARG EE_BASE_IMAGE=registry.redhat.io/ansible-automation-platform-23/ee-minimal-rhel8:latest
ARG EE_BUILDER_IMAGE=registry.redhat.io/ansible-automation-platform-23/ansible-builder-rhel8:latest

FROM $EE_BASE_IMAGE as galaxy
ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=
ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS=
USER root

ADD _build /build
WORKDIR /build

RUN ansible-galaxy role install $ANSIBLE_GALAXY_CLI_ROLE_OPTS -r requirements.yml --roles-path "/usr/share/ansible/roles"
RUN ANSIBLE_GALAXY_DISABLE_GPG_VERIFY=1 ansible-galaxy collection install $ANSIBLE_GALAXY_CLI_COLLECTION_OPTS -r requirements.yml --collections-path "/usr/share/ansible/collections"

FROM $EE_BUILDER_IMAGE as builder

COPY --from=galaxy /usr/share/ansible /usr/share/ansible

ADD _build/requirements.txt requirements.txt
ADD _build/bindep.txt bindep.txt
RUN ansible-builder introspect --sanitize --user-pip=requirements.txt --user-bindep=bindep.txt --write-bindep=/tmp/src/bindep.txt --write-pip=/tmp/src/requirements.txt
RUN assemble

FROM $EE_BASE_IMAGE
USER root

COPY --from=galaxy /usr/share/ansible /usr/share/ansible

COPY --from=builder /output/ /output/
RUN /output/install-from-bindep && rm -rf /output/wheels

ENV _CONTAINERS_USERNS_CONFIGURED=""

LABEL ansible-execution-environment=true

# Add tools here (oc/helm)
RUN curl -Sso oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz \
 && tar xf oc.tar.gz -C /usr/bin --no-same-owner \
 && rm oc.tar.gz \
 && chmod +x /usr/bin/oc \
 && chown root: /usr/bin/oc \
 && curl -Sso helm.tar.gz https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/helm/latest/helm-darwin-amd64.tar.gz \
 && tar xf helm.tar.gz -C /usr/bin --no-same-owner \
 && rm helm.tar.gz \
 && mv /usr/bin/helm-darwin-amd64 /usr/bin/helm \
 && chmod +x /usr/bin/helm \
 && chown root: /usr/bin/helm

# Add the podman stuff here, from https://www.redhat.com/sysadmin/podman-inside-container
RUN /usr/bin/microdnf -y update; /usr/bin/microdnf -y reinstall shadow-utils; \
    /usr/bin/microdnf -y install podman git crun skopeo fuse-overlayfs; \ 
    /usr/bin/microdnf -y remove container-selinux \
    rm -rf /var/cache /var/log/dnf* /var/log/yum.*; \
    RUN useradd -u 10001 podman; \
    echo podman:10000:5000 > /etc/subuid; \
    echo podman:10000:5000 > /etc/subgid; \
    mkdir -p /home/podman/.local/share/containers/storage; \
    chown -R 10001:10001 /home/podman

VOLUME /var/lib/containers
VOLUME /home/podman/.local/share/containers

ADD containers.conf /etc/containers/containers.conf
ADD podman-containers.conf /home/podman/.config/containers/containers.conf
ADD registries.conf /etc/containers/registries.conf
ADD certs.pem /etc/pki/ca-trust/source/anchors/

RUN update-ca-trust; \
    chmod 644 /etc/containers/containers.conf; \
    sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a "/var/lib/shared",' -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' /etc/containers/storage.conf; \
    mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers /var/lib/shared/vfs-images /var/lib/shared/vfs-layers; \
    touch /var/lib/shared/overlay-images/images.lock; \
    touch /var/lib/shared/overlay-layers/layers.lock; \
    touch /var/lib/shared/vfs-images/images.lock; \
    touch /var/lib/shared/vfs-layers/layers.lock 

ENV _CONTAINERS_USERNS_CONFIGURED=""




####### Changes to create EE in a disconnected environment
# Remove ubi repo which tries to reach external links
RUN rm -f /etc/yum.repos.d/*.repo \
 && rm -rf /var/cache /var/log/dnf* /var/log/yum.* \
 && chmod -R +x /usr/bin/
####### This marks the end of edits for the main image

